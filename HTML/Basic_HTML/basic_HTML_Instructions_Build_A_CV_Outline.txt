Welcome to freeCodeCamp!

Workshop:  Build a Curriculum Outline https://www.freecodecamp.org/learn/full-stack-developer/workshop-curriculum-outline/step-1

This workshop will serve as your introduction to HTML and coding in general. You will learn about headings and paragraph elements.

Step 1 (Create a file named index.html)

HTML stands for HyperText Markup Language. It's the code that defines the structure and content of a webpage. This is your code editor, where you'll write HTML.

Find line 1 in the editor and type this text:

Welcome to freeCodeCamp
When you are done, click the "check your code" button to see if it's correct.

Step 2
HTML is made up of elements. The first one you will use is the h1 element:

<h1>Welcome to freeCodeCamp</h1>
It starts with an opening tag (<h1>), ends with a closing tag (</h1>), and has the text it will display in between the tags.

Turn your Welcome to freeCodeCamp text into an h1 element by adding an opening tag in front of it, and a closing tag after it.

Step 3
Notice that the HTML you write in the editor shows up in the preview. In this workshop, you will write the HTML for a partial curriculum webpage.

Below your h1 element, type the following on the empty line:

Full Stack Curriculum

Step 4
An h1 element is the main heading of a webpage and you should only use one per page. h2 elements represent subheadings. You can have multiple per page and they look like this:

<h2>This is a subheading.</h2>
Turn the Full Stack Curriculum text into an h2 element by surrounding it with opening and closing h2 tags.

Step 5
Below the other two lines of text, add:

Learn the skills to become a full stack developer

Step 6
When you need to add a paragraph to a webpage, you can use the p element like this:

<p>This is a paragraph element.</p>
Turn Learn the skills to become a full stack developer into a paragraph element.

Step 7
There are six heading elements in HTML: h1 through h6. They're used to show the importance of sections on your webpage, with h1 being the most important and h6 the least.

Below your p element, add an h3 heading with the text:

Introduction to HTML

Step 8
Notice that each heading looks a little different in the preview. Same with the paragraph.

Next, add another p element that displays the following text:

HTML represents the content and structure of a webpage

Step 9
You're getting the hang of it. Next, add another h3 element at the bottom of the editor with the text:

Introduction to CSS

Step 10
While HTML defines the structure and content of a webpage, CSS is used to add style — things like colors, fonts, spacing, and layout.

Below the h3 you just added, add another paragraph element with the text:

CSS is used to style a webpage

Step 11
Finally, JavaScript makes your webpage interactive — it lets you tell the page what to do when someone clicks a button, submits a form, or many other things.

For the last step of the workshop, add another h3 and p element to the page describing JavaScript.

First, add an h3 element with the text:

Introduction to JavaScript
Then, below that h3 element, add a p element with the following text:

JavaScript adds interactivity to a webpage

LAB Debug Camperbot's Profile Page:

Camperbot is learning how to code too and needs some help with their HTML.

In this lab, you will help Camperbot find and fix the errors in their code.

Debug Camperbot's Profile Page
Camperbot is trying to build a profile page. They asked a friend to look over their code and they said it has some errors.

Your job is to fix all of Camperbot's errors so they can continue building their profile page. Complete the items in the user stories below and click "Run the Tests" to see if you fixed all the errors.

User Stories:

Camperbot is trying to use a heading2 element, but that element does not exist. Fix those tags so it uses a correct second-level heading element.
Camperbot is trying to add two paragraphs with pp, but those don't exist either. Fix them so they use correct paragraph tags.
Camperbot is using an h3 element for the Background and Interests subheading but it has a syntax error. Spot the issue and resolve it.

Tests
Waiting:1. You should have exactly one h1 element on the page.
Waiting:2. You should not remove the <h1>Hello from Camperbot!</h1> element from the page.
Waiting:3. You should have exactly one h2 element on the page.
Waiting:4. You should have an h2 element with the text About. Here's an example: <h2>Text here</h2>
Waiting:5. You should have a paragraph element with the text My name is Camperbot and I love learning new things. Here's an example: <p>Text here</p>
Waiting:6. You should have a paragraph element with the text I enjoy solving puzzles. Here's an example: <p>Text here</p>
Waiting:7. You should have exactly two paragraph elements on the page.
Waiting:8. You should have exactly one h3 element on the page.
Waiting:9. You should have an h3 element with the text Background and Interests. Here's an example: <h3>Text here</h3>
Waiting:10. You should have exactly five total elements on the page.

CODE TO DEBUG:

<h1>Hello from Camperbot!</h1>

<heading2>About</heading2>

<pp>My name is Camperbot and I love learning new things.</pp>

<h3>Background and Interests<h3/>
<pp>I enjoy solving puzzles.</pp>

THEORY Understanding HTML Attributes
In these lessons, you will learn more about HTML (HyperText Markup Language), a markup language for creating web pages.

You will learn about HTML's role on the web, and what HTML attributes are.

What Role Does HTML Play on the Web?

HTML, which stands for Hypertext Markup Language, is a markup language for creating web pages. When you visit a website and see content like paragraphs, headings, links, images, and videos; that's HTML.

Here is a small example using HTML elements. Try editing some of the text in the editor and see the changes update in the preview window.

<h1>Main heading element</h1>

<p>I am a paragraph element.</p>

1
2
3
<h1>Main heading element</h1>

<p>I am a paragraph element.</p>

Open Sandbox
HTML represents the content and structure of a webpage through the use of elements. Most elements will have an opening tag and a closing tag. Sometimes those tags are referred to as start and end tags. In between those two tags, you will have the content. This content can be text or other HTML elements.

Here is another example of a paragraph element. Change the text in the editor to say I love coding! and see the results in the preview window.

<p>I am a paragraph element.</p>

Both opening and closing tags start with a left angle bracket (<), and end with a right angle bracket (>), with the tag name placed between these angle brackets. While HTML tag names are case-insensitive, it is a widely accepted convention and best practice to write them in lowercase.

Here is a closer look at just the opening and closing paragraph tags:

<p>
</p>
What distinguishes an opening tag from a closing tag is the forward slash (/) placed immediately after the left angle bracket in a closing tag. Some HTML elements do not have a closing tag. These are known as void elements.

Here is an example of an image element which is a void element:

<img>
Notice that this image element does not have the closing tag and it does not have any content. Void elements cannot have any content and only have a start tag.

Sometimes you will see void elements that use a / before the > like this:

<img />
While many code formatters like Prettier, will choose to include the / in void elements, the HTML spec states that the presence of the / "does not mark the start tag as self-closing but instead is unnecessary and has no effect of any kind".

In real world development, you will see both forms so it is important to be familiar with both.

If you wanted to display an image, you will need to include a couple of attributes inside your image element. An attribute is a special value used to adjust the behavior for an HTML element.

Here is an example of an image element with a src attribute. Update the value of the src attribute to "https://cdn.freecodecamp.org/curriculum/cat-photo-app/cats.jpg" and you will see the image change to two cats peacefully sleeping.

<img src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg" />

The src attribute is used to specify the location for that image. For image elements, it's good practice to include another attribute called the alt attribute. The alt attribute is used to provide short, descriptive text for the images.

Here's an example of an image element with the src and alt attributes. Try breaking the image by updating the src value to "https://.freecodecamp.org/curriculum/cat-photo-app/cats.jpg". You will see the image disappear and only the alt text show.

<img src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/cats.jpg" alt="Two tabby kittens sleeping together on a couch." />

So, you might be wondering if HTML by itself is enough to build a website. Well, the answer is: it depends. If you're building a small practice project that only displays text and images, HTML alone might be sufficient. However, if you're creating a modern professional website, you will need to have HTML, CSS, and JavaScript.

HTML is for the content and structure. CSS is for styling. JavaScript is for adding interactivity to your web pages. A good analogy for this is to compare HTML, CSS, and JavaScript with a complete building.

HTML represents the blocks, concrete, and irons that make up the walls. It's the foundation that makes the building strong. CSS represents the interior and exterior design that makes the house look beautiful. JavaScript represents the electrical and water system that ensures uninterrupted access to water and electricity.

Questions:

What does HTML stand for?

HyperText Maker Language
HyperText Marker Language
HyperText Markdown Language
HyperText Markup Language

Which of the following is the correct syntax for a closing tag?

<;p>
<p>
</p>
<///p/>

Which of the following is a valid attribute used inside the img element?

src
bold
closing
div

What Are Attributes, and How Do They Work?
An attribute is a value placed inside the opening tag of an HTML element. Attributes provide additional information about the element or specify how the element should behave. Here is the basic syntax for an attribute:

<element attribute="value"></element>
The attribute name is followed by an equal sign (=) and a value in quotes. The value can be a string or a number, depending on the attribute.

This first example uses the href and target attributes. The href attribute specifies the URL of a link and the target attribute specifies where to open the link.

Change the href="https://www.freecodecamp.org/news/" to href="https://www.freecodecamp.org". Now when you click on the link in the interactive editor, you will see the freeCodeCamp homepage in a new browser tab.

<a href="https://www.freecodecamp.org/news/" target="__blank">Visit freeCodeCamp</a>

Without the href attribute, the link would not work because there would be no destination URL. So you must include this href attribute to make the link functional. The target="__blank" enables the link to open in a new browser tab. You will learn more about the target attribute in future lessons.

Other common attributes are the src, and alt, or alternative, attribute - which is used to specify the source of an image and provide alternative descriptive text for the image, respectively.

Change the src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/cats.jpg" to src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg". Then change the alt="Two tabby kittens sleeping together on a couch." to alt="Two cats running in the dirt.".

<img src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/cats.jpg" alt="Two tabby kittens sleeping together on a couch." />

Similar to the href attribute, the src attribute is required because it specifies the image file to be displayed. The alt attribute is not required, but it is recommended for accessibility purposes. Accessibility means making sure that everyone, including those with disabilities, can use and understand things like websites, apps, and physical spaces. You will learn more about accessibility in the upcoming lessons.

Some attributes are a little unique with their syntax like the checked attribute.

Try clicking on the checkbox in the preview window to see it alternate between a checked and unchecked state.

<input type="checkbox" checked />

An attribute is a value placed inside the opening tag of an HTML element. Attributes provide additional information about the element or specify how the element should behave. Here is the basic syntax for an attribute:

<element attribute="value"></element>
The attribute name is followed by an equal sign (=) and a value in quotes. The value can be a string or a number, depending on the attribute.

This first example uses the href and target attributes. The href attribute specifies the URL of a link and the target attribute specifies where to open the link.

Change the href="https://www.freecodecamp.org/news/" to href="https://www.freecodecamp.org". Now when you click on the link in the interactive editor, you will see the freeCodeCamp homepage in a new browser tab.

1
<a href="https://www.freecodecamp.org/news/" target="__blank">Visit freeCodeCamp</a>
 
Without the href attribute, the link would not work because there would be no destination URL. So you must include this href attribute to make the link functional. The target="__blank" enables the link to open in a new browser tab. You will learn more about the target attribute in future lessons.

Other common attributes are the src, and alt, or alternative, attribute - which is used to specify the source of an image and provide alternative descriptive text for the image, respectively.

Change the src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/cats.jpg" to src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg". Then change the alt="Two tabby kittens sleeping together on a couch." to alt="Two cats running in the dirt.".

1
<img src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/cats.jpg" alt="Two tabby kittens sleeping together on a couch." />

Similar to the href attribute, the src attribute is required because it specifies the image file to be displayed. The alt attribute is not required, but it is recommended for accessibility purposes. Accessibility means making sure that everyone, including those with disabilities, can use and understand things like websites, apps, and physical spaces. You will learn more about accessibility in the upcoming lessons.

Some attributes are a little unique with their syntax like the checked attribute.

Try clicking on the checkbox in the preview window to see it alternate between a checked and unchecked state.

1
<input type="checkbox" checked />
 
In the following example, we have an input element with the type attribute set to checkbox. Inputs are used to collect data from users, and the type attribute specifies the type of input. In this case, this input is a checkbox. You will learn more about how inputs work in the upcoming lessons.

The checked attribute is used to specify that the checkbox should be checked by default. The checked attribute does not require a value. If it is present, the checkbox will be checked by default. If the attribute is not present, the checkbox will be unchecked. This is known as a boolean attribute. You will learn more about booleans in general when you get to the JavaScript section.

Remove the checked attribute from the input in the interactive editor, and you will see that the checkbox is no longer checked by default.

<input type="checkbox" checked />


An attribute is a value placed inside the opening tag of an HTML element. Attributes provide additional information about the element or specify how the element should behave. Here is the basic syntax for an attribute:

<element attribute="value"></element>
The attribute name is followed by an equal sign (=) and a value in quotes. The value can be a string or a number, depending on the attribute.

This first example uses the href and target attributes. The href attribute specifies the URL of a link and the target attribute specifies where to open the link.

Change the href="https://www.freecodecamp.org/news/" to href="https://www.freecodecamp.org". Now when you click on the link in the interactive editor, you will see the freeCodeCamp homepage in a new browser tab.

1
<a href="https://www.freecodecamp.org/news/" target="__blank">Visit freeCodeCamp</a>

Without the href attribute, the link would not work because there would be no destination URL. So you must include this href attribute to make the link functional. The target="__blank" enables the link to open in a new browser tab. You will learn more about the target attribute in future lessons.

Other common attributes are the src, and alt, or alternative, attribute - which is used to specify the source of an image and provide alternative descriptive text for the image, respectively.

Change the src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/cats.jpg" to src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/running-cats.jpg". Then change the alt="Two tabby kittens sleeping together on a couch." to alt="Two cats running in the dirt.".

1
<img src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/cats.jpg" alt="Two tabby kittens sleeping together on a couch." />

Similar to the href attribute, the src attribute is required because it specifies the image file to be displayed. The alt attribute is not required, but it is recommended for accessibility purposes. Accessibility means making sure that everyone, including those with disabilities, can use and understand things like websites, apps, and physical spaces. You will learn more about accessibility in the upcoming lessons.

Some attributes are a little unique with their syntax like the checked attribute.

Try clicking on the checkbox in the preview window to see it alternate between a checked and unchecked state.

1
<input type="checkbox" checked />

In the following example, we have an input element with the type attribute set to checkbox. Inputs are used to collect data from users, and the type attribute specifies the type of input. In this case, this input is a checkbox. You will learn more about how inputs work in the upcoming lessons.

The checked attribute is used to specify that the checkbox should be checked by default. The checked attribute does not require a value. If it is present, the checkbox will be checked by default. If the attribute is not present, the checkbox will be unchecked. This is known as a boolean attribute. You will learn more about booleans in general when you get to the JavaScript section.

Remove the checked attribute from the input in the interactive editor, and you will see that the checkbox is no longer checked by default.

1
<input type="checkbox" checked />

There are several common boolean attributes you will encounter in HTML, such as disabled, readonly, and required. These attributes are used to specify the state of an element, such as whether it is disabled, read-only, or required.

Here is an example of a text input element that is disabled by default. Try clicking on the input element in the preview window. Now remove the disabled attribute from the input element and you will see that the input is no longer disabled by default. You should now be able to click on it and type inside the field.

<input type="text" disabled>

HTML has many attributes that can be used to customize the behavior and appearance of elements on a webpage. Understanding how to use attributes is essential for creating interactive and accessible web content. Over the next few lessons, you will learn about more HTML attributes and how to use them effectively in your web development projects.

Questions:

Which of the following is an example of a boolean attribute?

src
href
disabled
alt

What is the role of an attribute in HTML?

Attributes provide additional information and help define the behavior for HTML elements.
Attributes change the background color of an element.
Attributes change the font size of an element.
Attributes add JavaScript functionality to an element.

Which of the following is the correct syntax for a boolean attribute?

<input type="checkbox" checked>
<input type="checkbox" checked="on">
<input type="checkbox" checked="off">
<input type="checkbox" checked="isChecked">